<?xml version="1.0"?>
<!DOCTYPE bindings SYSTEM "chrome://org.gnucitizen.weaponry.common/locale/xbl/dbtree.dtd">
<bindings
	xmlns="http://www.mozilla.org/xbl"
	xmlns:xbl="http://www.mozilla.org/xbl"
	xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
	
	<binding id="dbtreecol" extends="chrome://org.gnucitizen.weaponry.common/content/xbl/datatree.xml#datatreecol"/>
	
	<binding id="dbtree" extends="chrome://org.gnucitizen.weaponry.common/content/xbl/datatree.xml#datatree">
		<implementation>
			<property name="table">
				<getter><![CDATA[
					return this.getAttribute('table');
				]]></getter>
				
				<setter><![CDATA[
					return this.setAttribute('table', val);
				]]></setter>
			</property>
			
			<property name="countQuery">
				<getter><![CDATA[
					return 'SELECT count() AS _count FROM \'' + this.table.replace(/'/g, '\\\'') + '\'' + (this.whereClause ? ' WHERE ' + this.whereClause : '');
				]]></getter>
			</property>
			
			<property name="selectQuery">
				<getter><![CDATA[
					return 'SELECT _ROWID_ as _ROWID_, * FROM \'' + this.table.replace(/'/g, '\\\'') + '\'' + (this.whereClause ? ' WHERE ' + this.whereClause : '');
				]]></getter>
			</property>
			
			<method name="filter">
				<parameter name="whereClause"/>
				
				<body><![CDATA[
					this.whereClause = whereClause;
					
					this.refresh();
				]]></body>
			</method>
			
			<method name="initializeConnection">
				<body><![CDATA[
					let self = this;
					
					let createConnection = function () {
						let fileUri = weaponryCommon.ioService.newURI(self.getAttribute('database'), null, null);
						let file = fileUri.QueryInterface(Components.interfaces.nsIFileURL).file;
						
						return weaponryCommon.openMozstorageConnection(file);
					};
					
					if (!this.connection) {
						this.addEventListener('DOMAttrModified', function (event) {
							if (event.attrName == 'database') {
								if (this.connection) {
									if ('asyncClose' in self.connection) {
										self.connection.asyncClose();
									} else {
										self.connection.close();
									}
								}
								
								self.connection = createConnection();
								
								self.refresh();
							}
						}, false);
					}
					
					if (this.connection) {
						if ('asyncClose' in this.connection) {
							this.connection.asyncClose();
						} else {
							this.connection.close();
						}
					}
					
					this.connection = createConnection();
					
					this.refresh();
				]]></body>
			</method>
			
			<method name="refreshLater">
				<body><![CDATA[
					let self = this;
					
					setTimeout(function () {
						self.refresh();
					}, 5000);
				]]></body>
			</method>
			
			<constructor>
				<action><![CDATA[
					let self = this;
					
					this.isRefreshing = false;
					this.shouldRefreshAgain = false;
					this.dbtreeOldRefresh = this.refresh;
					
					this.refresh = function () {
						if (this.isRefreshing) {
							this.shouldRefreshAgain = true;
							
							return;
						}
						
						if (!this.connection.connectionReady) {
							this.isRefreshing = false;
							
							if (this.shouldRefreshAgain) {
								this.shouldRefreshAgain = false;
								
								this.refresh();
							}
							
							return;
						} else {
							this.isRefreshing = true;
						}
						
						this.dataView.clearDataRows(false);
						
						let index = 0;
						let groups = {};
						let groupbyAttr = this.getAttribute('groupby');
						let groupincludeAttr = this.getAttribute('groupinclude');
						
						weaponryCommon.executeMozstorageStatementAsynchronously(this.connection, this.selectQuery, null,
							function (item) {
								let path = '';
								let groupbys = groupbyAttr.split(/\s+/g);
								let groupbysLength = groupbys.length;
								
								let i, groupby, previousPath, data, groupincludes, j, groupincludesLength, groupinclude;
								
								for (i = 0; i < groupbysLength; i += 1) {
									groupby = groupbys[i];
									
									if (groupby[0] == '!') {
										item['_metaPath'] = item[groupby.substring(1)];
										
										continue;
									}
									
									previousPath = path;
									
									path += '.' + item[groupby];
									
									if (!groups[path]) {
										data = {};
										groupincludes = groupincludeAttr.split(/\s+/g);
										groupincludesLength = groupincludes.length;
										
										for (j = 0; j < groupincludesLength; j += 1) {
											groupinclude = groupincludes[j];
											
											data[groupinclude] = item[groupinclude];
										}
										
										data['_metaGroup'] = groupby;
										data['_metaPath'] = item[groupby];
										data['_metaID'] = path;
										data['_metaParentID'] = (previousPath == '' ? null : previousPath);
										data[groupby] = item[groupby];
										
										self.dataView.appendDataRow(data, false);
										
										groups[path] = true;
									}
								}
								
								item['_metaID'] = path + '.' + index;
								item['_metaParentID'] = path;
								
								self.dataView.appendDataRow(item, false);
								
								index += 1;
							},
							function () {
								self.dbtreeOldRefresh();
								
								self.isRefreshing = false;
								
								if (self.shouldRefreshAgain) {
									self.shouldRefreshAgain = false;
									
									self.refreshLater();
								}
							});
					};
					
					this.initializeConnection();
				]]></action>
			</constructor>
			
			<destructor>
				<action><![CDATA[
					// pass
				]]></action>
			</destructor>
		</implementation>
	</binding>
	
</bindings>
